{"version":3,"sources":["Images/Download.png","Images/Upload.png","Components/Compressor.js","App.js","serviceWorker.js","index.js"],"names":["Compressor","useState","compressedLink","setCompressedLink","originalImage","setOriginalImage","originalLink","setOriginalLink","clicked","setClicked","uploadImage","setUploadImage","outputFileName","setOutputFileName","imageSize","setImageSize","compressedImageSize","setCompressedImageSize","percentage","deviation","Math","round","className","Navbar","bg","variant","Brand","href","icon","faImage","size","Card","Img","src","Upload","class","type","accept","onChange","event","imageFile","target","files","URL","createObjectURL","name","uploadLink","onClick","e","preventDefault","output","options","maxSizeMB","maxWidthOrHeight","useWebWorker","initialQuality","floor","alert","imageCompression","then","x","downloadLink","click","download","Download","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kQAAe,G,MAAA,IAA0B,sCCA1B,MAA0B,mC,uCCqJ1BA,MA5If,WAEE,MAA8CC,mBAAS,IAAvD,mBAAQC,EAAR,KAAwBC,EAAxB,KACA,EAA4CF,mBAAS,IAArD,mBAAQG,EAAR,KAAuBC,EAAvB,KACA,EAA0CJ,mBAAS,IAAnD,mBAAQK,EAAR,KAAsBC,EAAtB,KACA,EAAgCN,oBAAS,GAAzC,mBAAQO,EAAR,KAAiBC,EAAjB,KACA,EAAwCR,oBAAS,GAAjD,mBAAQS,EAAR,KAAqBC,EAArB,KACA,EAA8CV,mBAAS,IAAvD,mBAAQW,EAAR,KAAwBC,EAAxB,KACA,EAAkCZ,mBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAsDd,mBAAS,GAA/D,mBAAOe,EAAP,KAA4BC,EAA5B,KA0COC,GAAcJ,EAAYE,GAAuBF,EACjDK,EAAYC,KAAKC,MAAmB,IAAbH,GAG9B,OACE,sBAAKI,UAAU,gBAAf,UACE,cAACC,EAAA,EAAD,CAAQD,UAAU,gCAAgCE,GAAG,QAAQC,QAAQ,QAArE,SACE,eAACF,EAAA,EAAOG,MAAR,CAAcJ,UAAU,iBAAiBK,KAAK,IAA9C,UACE,cAAC,IAAD,CAAiBL,UAAU,wBAAwBM,KAAMC,IAASC,KAAM,IAAM,IADhF,mCAMA,sBAAKR,UAAU,WAAf,UACE,sBAAKA,UAAU,wCAAf,UACGZ,EACC,cAACqB,EAAA,EAAKC,IAAN,CACEV,UAAU,QACVG,QAAQ,MACRQ,IAAK3B,IAGP,cAACyB,EAAA,EAAKC,IAAN,CACEV,UAAU,aACVG,QAAQ,MACRQ,IAAKC,IAGT,sBAAKZ,UAAU,+DAAf,UACA,oBAAGA,UAAU,WAAb,mBAA+BF,KAAKC,MAAMP,EAAU,SACpD,wBAAQqB,MAAM,eAAd,oBACE,uBACEC,KAAK,OACLC,OAAO,UACPf,UAAU,yBACVgB,SAAU,SAAAC,GAAK,OA3E7B,SAAoBA,GAClB,IAAMC,EAAYD,EAAME,OAAOC,MAAM,GACrCnC,EAAgBoC,IAAIC,gBAAgBJ,IACpCnC,EAAiBmC,GACjB3B,EAAkB2B,EAAUK,MAC5BlC,GAAe,GAEfI,EAAayB,EAAUV,MAoEQgB,CAAWP,YAOpC,sBAAKjB,UAAU,qGAAf,UACE,uBACCV,EACC,wBACEwB,KAAK,SACLd,UAAU,gBACVyB,QAAS,SAAAC,GAAC,OA7ExB,SAAeA,GACbA,EAAEC,iBAEF,IAYIC,EAZEC,EAAU,CACdC,UAAW,EACXC,iBAAkB,IAClBC,cAAc,EACdC,eAAgB,IAGlB,OAAIJ,EAAQC,WAAahC,KAAKoC,MAAM1C,EAAY,OAC9C2C,MAAM,0CACC,IAITC,YAAiBtD,EAAe+C,GAASQ,MAAK,SAAAC,GAC5CV,EAASU,EACT,IAAMC,EAAelB,IAAIC,gBAAgBM,GACzCjC,EAAuB2C,EAAE9B,MACzB3B,EAAkB0D,MAGpBpD,GAAW,GACJ,GAqDmBqD,CAAMd,IAHtB,sBAQA,gCAIJ,sBAAK1B,UAAU,6CAAf,UACE,cAACS,EAAA,EAAKC,IAAN,CAAUV,UAAU,QAAQG,QAAQ,MAAMQ,IAAK/B,IAC9CM,EACC,sBAAKc,UAAU,2CAAf,UACE,sBAAKA,UAAU,oDAAf,UACA,oBAAGA,UAAU,WAAb,mBAA+BF,KAAKC,MAAML,EAAoB,SAC9D,oBAAGM,UAAU,YAAb,wBACcH,EADd,UAIA,mBACEQ,KAAMzB,EACN6D,SAAUnD,EACVU,UAAU,sCAHZ,yBAUF,cAACS,EAAA,EAAKC,IAAN,CACEV,UAAU,aACVG,QAAQ,MACRQ,IAAK+B,cCjINC,MANf,WACE,OACE,cAAC,EAAD,KCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d88c820d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Download.c48d93a8.png\";","export default __webpack_public_path__ + \"static/media/Upload.e0143b57.png\";","import React, {useState} from 'react';\nimport imageCompression from \"browser-image-compression\";\nimport './Compressor.css'\nimport Download from '../Images/Download.png';\nimport Upload from '../Images/Upload.png';\nimport {Navbar, Card} from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faImage } from '@fortawesome/free-solid-svg-icons'\n\nfunction Compressor(){\n\n  const [ compressedLink, setCompressedLink ] = useState(\"\");\n  const [ originalImage, setOriginalImage ] = useState(\"\");\n  const [ originalLink, setOriginalLink ] = useState(\"\");\n  const [ clicked, setClicked ] = useState(false);\n  const [ uploadImage, setUploadImage ] = useState(false);\n  const [ outputFileName, setOutputFileName ] = useState(\"\");\n  const [imageSize, setImageSize] = useState(0);\n  const [compressedImageSize, setCompressedImageSize] = useState(0);\n\n  function uploadLink(event){\n    const imageFile = event.target.files[0];\n    setOriginalLink(URL.createObjectURL(imageFile));\n    setOriginalImage(imageFile);\n    setOutputFileName(imageFile.name);\n    setUploadImage(true);\n    // get file size from originalImage;\n    setImageSize(imageFile.size);\n   \n  }\n\n  function click(e){\n    e.preventDefault();\n\n    const options = {\n      maxSizeMB: 3,\n      maxWidthOrHeight: 800,\n      useWebWorker: true,\n      initialQuality: 0.5\n    };\n\n    if (options.maxSizeMB >= Math.floor(imageSize / 1024)) {\n      alert(\"This image is already compressed fully\");\n      return 0;\n    }\n\n    let output;\n    imageCompression(originalImage, options).then(x => {\n      output = x;\n      const downloadLink = URL.createObjectURL(output);\n      setCompressedImageSize(x.size);\n      setCompressedLink(downloadLink);\n    });\n\n    setClicked(true);\n    return 1;\n \n\n  };\n   // make a percentage for deviation between imageSize and compressedImageSize\n   const percentage = (imageSize - compressedImageSize) / imageSize;\n   const deviation = Math.round(percentage * 100);\n\n\n  return(\n    <div className=\"mainContainer\">\n      <Navbar className=\"navbar justify-content-center\" bg=\"light\" variant=\"light\">\n        <Navbar.Brand className=\"navbar-content\" href=\"/\">\n          <FontAwesomeIcon className=\"social-icons changeOn\" icon={faImage} size={1} />{' '}\n          GithubCRCE Image Compressor\n        </Navbar.Brand>\n      </Navbar>\n\n        <div className=\"row mt-5\">\n          <div className=\"col-xl-4 col-lg-4 col-md-12 col-sm-12\">\n            {uploadImage ? (\n              <Card.Img\n                className=\"image\"\n                variant=\"top\"\n                src={originalLink}\n              ></Card.Img>\n            ) : (\n              <Card.Img\n                className=\"uploadCard\"\n                variant=\"top\"\n                src={Upload}\n              ></Card.Img>\n            )}\n            <div className=\"d-flex flex-column justify-content-center upload-btn-wrapper\">\n            <p className=\"fileSize\">Size: {Math.round(imageSize/1024)}</p>\n            <button class=\"btn btn-dark\">UPLOAD</button>\n              <input\n                type=\"file\"\n                accept=\"image/*\"\n                className=\"mt-2 btn btn-dark w-75\"\n                onChange={event => uploadLink(event)}\n              />\n\n\n\n            </div>\n          </div>\n          <div className=\"col-xl-4 col-lg-4 col-md-12 mb-5 mt-4 col-sm-12 d-flex justify-content-center align-items-baseline\">\n            <br />\n            {outputFileName ? (\n              <button\n                type=\"button\"\n                className=\" btn btn-dark\"\n                onClick={e => click(e)}\n              >\n                Compress\n              </button>\n            ) : (\n              <></>\n            )}\n          </div>\n\n          <div className=\"col-xl-4 col-lg-4 col-md-12 col-sm-12 mt-3\">\n            <Card.Img className=\"image\" variant=\"top\" src={compressedLink}></Card.Img>\n            {clicked ? (\n              <div className=\"d-flex flex-column justify-content-start\">\n                <div className=\"FileInfo d-flex flex-column justify-content-start\">\n                <p className=\"fileSize\">Size: {Math.round(compressedImageSize/1024)}</p>\n                <p className=\"deviation\">\n                  Compressed {deviation}%\n                </p>\n                </div>\n                <a\n                  href={compressedLink}\n                  download={outputFileName}\n                  className=\"btn btn-dark w-75 align-self-center\"\n                >\n                  DOWNLOAD\n                </a>\n\n              </div>\n            ) : (\n              <Card.Img\n                className=\"uploadCard\"\n                variant=\"top\"\n                src={Download}\n              ></Card.Img>\n            )}\n          </div>\n        </div>\n      </div>\n  )\n}\n\nexport default Compressor;\n","import React from 'react';\nimport './App.css';\n\nimport Compressor from \"./Components/Compressor\";\n\nfunction App() {\n  return (\n    <Compressor />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}